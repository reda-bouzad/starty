<?php

namespace App\Nova;

use App\Nova\Actions\SelfieVerificationReminder;
use App\Nova\Actions\SendNotificationToUsers;
use App\Nova\Actions\VerifyIdentityAction;
use Ebess\AdvancedNovaMediaLibrary\Fields\Images;
use Ebess\AdvancedNovaMediaLibrary\Fields\Media;
use Illuminate\Http\Request;
use Illuminate\Mail\Markdown;
use Illuminate\Validation\Rule;
use Illuminate\Validation\Rules;
use Laravel\Nova\Fields\Boolean;
use Laravel\Nova\Fields\Date;
use Laravel\Nova\Fields\Gravatar;
use Laravel\Nova\Fields\Hidden;
use Laravel\Nova\Fields\ID;
use Laravel\Nova\Fields\MorphToMany;
use Laravel\Nova\Fields\Number;
use Laravel\Nova\Fields\Password;
use Laravel\Nova\Fields\Select;
use Laravel\Nova\Fields\Text;
use Laravel\Nova\Fields\Textarea;
use Laravel\Nova\Http\Requests\NovaRequest;
use MatanYadaev\EloquentSpatial\Objects\Point;
use Stepanenko3\NovaJson\JSON;

class User extends Resource
{
    /**
     * The model the resource corresponds to.
     *
     * @var string
     */
    public static $model = \App\Models\User::class;

    /**
     * The single value that should be used to represent the resource when being displayed.
     *
     * @var string
     */
    public static $title = 'fullname';

    public static function label()
    {
        return "Utilisateurs";
    }

    public static function indexQuery(NovaRequest $request, $query)
    {
        $query->where('user_type', 'customer')->whereNotNull('firstname')
            ->whereNotNull('lastname');
        return parent::indexQuery($request, $query); // TODO: Change the autogenerated stub
    }

    public function authorizedToDelete(Request $request)
    {
        return optional($this->resource)->user_type !== "administrator";
    }

    /**
     * The columns that should be searched.
     *
     * @var array
     */
    public static $search = [
        "id",
        "firstname",
        "lastname",
        "show_pseudo_only",
        "pseudo",
    ];

    /**
     * Get the fields displayed by the resource.
     *
     * @param \Laravel\Nova\Http\Requests\NovaRequest $request
     * @return array
     */
    public function fields(NovaRequest $request)
    {
        return [
            ID::make()->sortable(),
            Boolean::make('Compte vérifié ?', 'is_verified'),
            Media::make('Avatar', 'avatar'),
            Media::make('Selfie', 'self_image'),

            Text::make('Prenom', 'firstname')
                ->sortable()
                ->textAlign('left')
                ->rules('max:255'),

            Text::make('Nom', 'lastname')
                ->sortable()
                ->textAlign('left')
                ->rules('max:255'),

            Text::make('Email')
                ->sortable()
                ->textAlign('left')
                ->rules('required', 'email', 'max:254', Rule::unique('users', 'email')->ignore($this->id)),


            Text::make('Téléphone', 'phone_number')
                ->textAlign('left')
                ->sortable()
                ->rules('max:255'),

            Select::make('Sexe', 'gender')->options(array('M' => 'Masculin', 'F' => 'Feminin'))
                ->textAlign('left')
                ->nullable(),

            Date::make('Date de naissance', 'birth_date')
                ->textAlign('left')
                ->nullable(),

            \Laravel\Nova\Fields\Markdown::make('Description')
                ->placeholder('Description')
                ->textAlign('left')
                ->nullable(),
            JSON::make('Dernière position', 'last_location', [
                Text::make('latitude')->rules(['nullable', 'numeric', 'between:-90,90'])
                    ->displayUsing(fn($request, $model, $attribute) => optional($model->last_location)->latitude),
                Text::make('longitude')->rules(['nullable', 'numeric', 'between:-180,180'])
                    ->displayUsing(fn($request, $model, $attribute) => optional($model->last_location)->longitude),
            ])->fillAtOnce(function ($request, $requestValues, $model, $attribute, $requestAttribute) {
                if ($requestValues['latitude'] && $requestValues['longitude']) {
                    $model->last_location = new Point($requestValues['latitude'], $requestValues['longitude']);
                    return new Point($requestValues['latitude'], $requestValues['longitude']);
                }
                return null;
            }),


            Hidden::make('user_type')->default('customer'),

            MorphToMany::make('Signalement', 'reports', Report::class),

        ];
    }

    /**
     * Get the cards available for the request.
     *
     * @param \Laravel\Nova\Http\Requests\NovaRequest $request
     * @return array
     */
    public function cards(NovaRequest $request)
    {
        return [];
    }

    /**
     * Get the filters available for the resource.
     *
     * @param \Laravel\Nova\Http\Requests\NovaRequest $request
     * @return array
     */
    public function filters(NovaRequest $request)
    {
        return [];
    }

    /**
     * Get the lenses available for the resource.
     *
     * @param \Laravel\Nova\Http\Requests\NovaRequest $request
     * @return array
     */
    public function lenses(NovaRequest $request)
    {
        return [];
    }

    /**
     * Get the actions available for the resource.
     *
     * @param \Laravel\Nova\Http\Requests\NovaRequest $request
     * @return array
     */
    public function actions(NovaRequest $request)
    {
        return [
            new VerifyIdentityAction(),
            new SelfieVerificationReminder(),
            new SendNotificationToUsers()
        ];
    }


    public static function relatableQuery(NovaRequest $request, $query)
    {
        if ($request->viaResource == 'events') {
            $event = \App\Models\Party::find($request->viaResourceId);
            $query->where('id', '!=', $event->user_id);
        }

        return $query;
    }

}
